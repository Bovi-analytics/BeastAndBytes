---
title: "Regular expressions"
subtitle: "Lecture 13"
date: "April 20, 2025"
format: 
  revealjs:
    footer: "[https://bovi-analytics.github.io/BeastsAndBytes/](https://bovi-analytics.github.io/BeastsAndBytes/)"
---

# Introduction to Regular Expressions {#sec-introduction}

## Prerequisites {#sec-prerequisites}

-   This chapter will focus on functions that use **regular expressions**, a concise and powerful language for describing patterns within strings.

```{r}
#| label: setup
#| echo: true
#| message: false

# Install necessary packages if not already installed
if(!require(tidyverse)) install.packages("tidyverse")
if(!require(babynames)) install.packages("babynames")

# Load the libraries
library(tidyverse)
library(babynames)
```

# Pattern basics {#sec-pattern-basics}

## Pattern basics {#sec-pattern-basics-1}

When this is supplied, [`str_view()`](https://stringr.tidyverse.org/reference/str_view.html) will show only the elements of the string vector that match, surrounding each match with `<>`, and, where possible, highlighting the match in blue.

```{r}
#| echo: true
#| message: true
str_view(fruit, "berry")
```

## Pattern basics {#sec-pattern-basics-2}

-   Letters and numbers match exactly and are called **literal characters**.

-   Most punctuation characters, like `.`, `+`, `*`, `[`,`]`, and `?`, have special [meanings](#0) and are called **metacharacters**.

## Pattern example 1 {#sec-pattern-example-1}

For example, `.` will match any character, so `"a."` will match any string that contains an “a” followed by another character

```{r}
#| echo: true
#| message: true
str_view(c("a", "ab", "ae", "bd", "ea", "eab"), "a.")
```

## Pattern example 2 {#sec-pattern-example-2}

For example, we could find all the fruits that contain an “a”, followed by three letters, followed by an “e”

```{r}
#| echo: true
#| message: true
str_view(fruit, "a...e")
```

# Quantifiers {#sec-quantifiers}

## Quantifiers {#sec-quantifiers-2}

**Quantifiers** control how many times a pattern can match:

-   `?` makes a pattern optional (i.e. it matches 0 or 1 times)

-   `+` lets a pattern repeat (i.e. it matches at least once)

-   `*` lets a pattern be optional or repeat (i.e. it matches any number of times, including 0).

## Quantifier `?` {#sec-quantifier-?}

```{r}
#| echo: true
#| message: true
# ab? matches an "a", optionally followed by a "b".
str_view(c("a", "ab", "abb"), "ab?")
```

## Quantifier `+` {#sec-quantifier-+}

```{r}
#| echo: true
#| message: true
# ab+ matches an "a", followed by at least one "b".
str_view(c("a", "ab", "abb"), "ab+")
```

## Quantifier `*` {#sec-quantifier-*}

```{r}
#| echo: true
#| message: true
# ab* matches an "a", followed by any number of "b"s.
str_view(c("a", "ab", "abb"), "ab*")
```

# Character classes {#sec-character-classes}

## Character classes {#sec-character-classes-2}

**Character classes** are defined by `[]` and let you match a set of characters

-   `[abcd]` matches “a”, “b”, “c”, or “d”.

-   You can also invert the match by starting with `^`: `[^abcd]` matches anything **except** “a”, “b”, “c”, or “d”.

## Example 1 {#sec-example-1}

We can use this idea to find the words containing an “x” surrounded by vowels:

```{r}
#| echo: true
#| message: true
str_view(words, "[aeiou]x[aeiou]")
```

## Example 2 {#sec-example-2}

We can use this idea to find “y” surrounded by consonants:

```{r}
#| echo: true
#| message: true
str_view(words, "[^aeiou]y[^aeiou]")
```

## Alternation {#sec-alternation}

You can use **alternation**, `|`, to pick between one or more alternative patterns. For example, the following patterns look for fruits containing “apple”, “melon”, or “nut”.

```{r}
#| echo: true
#| message: true
str_view(fruit, "apple|melon|nut")
```

# Key functions {#sec-thank-you}

## Detect matches {#sec-detect-matches}

`str_detect()` returns a logical vector that is `TRUE` if the pattern matches an element of the character vector and `FALSE` otherwise

```{r}
#| echo: true
#| message: true
str_detect(c("a", "b", "c"), "[aeiou]")
```

## Count matches {#sec-count-matches}

The next step up in complexity from [`str_detect()`](https://stringr.tidyverse.org/reference/str_detect.html) is [`str_count()`](https://stringr.tidyverse.org/reference/str_count.html): rather than a true or false, it tells you how many matches there are in each string.

```{r}
#| echo: true
#| message: true
x <- c("apple", "banana", "pear")
str_count(x, "p")
```

## Replace values {#sec-replace-values}

We can modify values with [`str_replace()`](https://stringr.tidyverse.org/reference/str_replace.html) and [`str_replace_all()`](https://stringr.tidyverse.org/reference/str_replace.html).

-    [`str_replace()`](https://stringr.tidyverse.org/reference/str_replace.html) replaces the first match,

-    [`str_replace_all()`](https://stringr.tidyverse.org/reference/str_replace.html) replaces all matches.

[`str_remove()`](https://stringr.tidyverse.org/reference/str_remove.html) and [`str_remove_all()`](https://stringr.tidyverse.org/reference/str_remove.html) are handy shortcuts for `str_replace(x, pattern, "")`

## Replace values {#sec-questions}

```{r}
#| echo: true
#| message: true
x <- c("apple", "pear", "banana")
str_replace_all(x, "[aeiou]", "-")
```

## Extract variables {#sec-extract-variables}

Consider the following dataset

```{r}
#| echo: false
#| message: true
df <- tribble(
  ~str,
  "<Sheryl>-F_34",
  "<Kisha>-F_45", 
  "<Brandon>-N_33",
  "<Sharon>-F_38", 
  "<Penny>-F_58",
  "<Justin>-M_41", 
  "<Patricia>-F_84", 
)
```

## Extract variables {#sec-extract-variables-2}

```{r}
#| echo: true
#| message: true
df |> 
  separate_wider_regex(
    str,
    patterns = c(
      "<", 
      name = "[A-Za-z]+", 
      ">-", 
      gender = ".",
      "_",
      age = "[0-9]+"
    )
  )
```

# Pattern details {#sec-pattern-details}

## Escaping {#sec-escaping}

In order to match a literal `.`, you need an **escape** which tells the regular expression to match metacharacters literally.

Like strings, regexps use the backslash for escaping.

-   So, to match a `.`, you need the regexp `\.`.

-   Unfortunately this creates a problem. We use strings to represent regular expressions, and `\` is also used as an escape symbol in strings.

## Escaping {#sec-escaping-2}

So to create the regular expression `\.` we need the string `"\\."`, as the following example shows.

```{r}
#| echo: true
#| message: true
# To create the regular expression \., we need to use \\.
dot <- "\\."

# But the expression itself only contains one \
str_view(dot)
cat("\n") 
# And this tells R to look for an explicit .
str_view(c("abc", "a.c", "bef"), "a\\.c")
```

## Escaping and literal  {#sec-escaping-and-literal}

If `\` is used as an escape character in regular expressions, how do you match a literal `\`?

-   Well, you need to escape it, creating the regular expression `\\`. To create that regular expression, you need to use a string, which also needs to escape `\`. That means to match a literal `\` you need to write `"\\\\"` — you need four backslashes to match one!

## Escaping and literal  {#sec-escaping-and-literal-2}

```{r}
#| echo: true
#| message: true
x <- "a\\b"
str_view(x)
cat("\n") 
str_view(x, "\\\\")
```

## Matching literals {#sec-matching-literals}

If you’re trying to match a literal `.`, `$`, `|`, `*`, `+`, `?`, `{`, `}`, `(`, `)`, there’s an alternative to using a backslash escape: you can use a character class: `[.]`, `[$]`, `[|]`, … all match the literal values.

```{r}
#| echo: true
#| message: true
str_view(c("abc", "a.c", "a*c", "a c"), "a[.]c")
```

## Anchors {#sec-anchors}

By default, regular expressions will match any part of a string. If you want to match at the start or end you need to **anchor** the regular expression using `^` to match the start or `$` to match the end:

```{r}
#| echo: true
#| message: true
str_view(fruit, "^a")
```

## Anchors {#sec-anchors-2}

```{r}
#| echo: true
#| message: true
str_view(fruit, "a$")
```

## Anchors {#sec-anchors-3}

To force a regular expression to match only the full string, anchor it with both `^` and `$`:

```{r}
#| echo: true
#| message: true
str_view(fruit, "apple")
cat("\n") 
str_view(fruit, "^apple$")
```

## Anchors {#sec-anchors-4}

You can also match the boundary between words (i.e. the start or end of a word) with `\b`.

```{r}
#| echo: true
#| message: true
x <- c("summary(x)", "summarize(df)", "rowsum(x)", "sum(x)")
str_view(x, "sum")
cat("\n") 
str_view(x, "\\bsum\\b")
```

## Anchors {#sec-anchors-5}

When used alone, anchors will produce a zero-width match

```{r}
#| echo: true
#| message: true
str_view("abc", c("$", "^", "\\b"))
```

## Anchors {#sec-anchors-6}

```{r}
#| echo: true
#| message: true
str_replace_all("abc", c("$", "^", "\\b"), "--")
```

## Character classes {#sec-character-classes-1}

A **character class**, or character **set**, allows you to match any character in a set. As we discussed above, you can construct your own sets with `[]`, where `[abc]` matches "a", "b", or "c" and `[^abc]` matches any character except "a", "b", or "c". Apart from `^` there are two other characters that have special meaning inside of `[]:`

-   `-` defines a range, e.g., `[a-z]` matches any lower case letter and `[0-9]` matches any number.
-   `\` escapes special characters, so `[\^\-\]]` matches `^`, `-`, or `]`.

## Character classes example 1 {#sec-character-classes-example-1}

```{r}
#| echo: true
#| message: true
x <- "abcd ABCD 12345 -!@#%."
str_view(x, "[abc]+")
cat("\n") 
str_view(x, "[a-z]+")
cat("\n") 
str_view(x, "[^a-z0-9]+")
```

## Character classes example 2 {#sec-character-classes-example-2}

```{r}
#| echo: true
#| message: true
# You need an escape to match characters that are otherwise
# special inside of []
str_view("a-b-c", "[a-c]")
cat("\n")
str_view("a-b-c", "[a\\-c]")
```

## Character classes {#sec-character-classes-3}

Some character classes are used so commonly that they get their own shortcut. You've already seen `.`, which matches any character apart from a newline. There are three other particularly useful pairs[^1]:

[^1]: Remember, to create a regular expression containing `\d` or `\s`, you'll need to escape the `\` for the string, so you'll type `"\\d"` or `"\\s"`.

## Character classes {#sec-character-classes-4}

-   `\d` matches any digit;\
    `\D` matches anything that isn't a digit.
-   `\s` matches any whitespace (e.g., space, tab, newline);\
    `\S` matches anything that isn't whitespace.
-   `\w` matches any "word" character, i.e. letters and numbers;\
    `\W` matches any "non-word" character.

## Character classes {#sec-character-classes-5}

The following code demonstrates the six shortcuts with a selection of letters, numbers, and punctuation characters.

```{r}
#| echo: true
#| message: true
x <- "abcd ABCD 12345 -!@#%."
str_view(x, "\\d+")
str_view(x, "\\D+")
str_view(x, "\\s+")
str_view(x, "\\S+")
str_view(x, "\\w+")
str_view(x, "\\W+")
```

## Quantifiers {#sec-quantifiers-3}

**Quantifiers** control how many times a pattern matches. In @sec-reg-basics you learned about `?` (0 or 1 matches), `+` (1 or more matches), and `*` (0 or more matches). For example, `colou?r` will match American or British spelling, `\d+` will match one or more digits, and `\s?` will optionally match a single item of whitespace. You can also specify the number of matches precisely with `{}`:

-   `{n}` matches exactly n times.
-   `{n,}` matches at least n times.
-   `{n,m}` matches between n and m times.

## Operator precedence and parentheses {#sec-operator-precedence-and-parentheses}

Regular expressions have their own precedence rules - Quantifiers have high precedence and alternation has low precedence which means that `ab+` is equivalent to `a(b+)`, and `^a|b$` is equivalent to `(^a)|(b$)`.

Just like with algebra, you can use parentheses to override the usual order. But unlike algebra you're unlikely to remember the precedence rules for regexes, so feel free to use parentheses liberally.

## Grouping and capturing {#sec-grouping-and-capturing}

As well as overriding operator precedence, parentheses have another important effect: they create **capturing groups** that allow you to use sub-components of the match.

For example, the following pattern finds all fruits that have a repeated pair of letters:

```{r}
#| echo: true
#| message: true
str_view(fruit, "(..)\\1")
```

## Grouping and capturing {#sec-grouping-and-capturing-2}

And this one finds all words that start and end with the same pair of letters:

```{r}
#| echo: true
#| message: true
str_view(words, "^(..).*\\1$")
```

## Grouping and capturing {#sec-grouping-and-capturing-3}

You can also use back references in `str_replace()`. For example, this code switches the order of the second and third words in `sentences`:

```{r}
#| echo: true
#| message: true
sentences |> 
  str_replace("(\\w+) (\\w+) (\\w+)", "\\1 \\3 \\2") |> 
  str_view()
```
