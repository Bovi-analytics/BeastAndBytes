---
title: "Data transformations"
subtitle: "Lecture 8"
date: "March 17, 2025"
format: 
  revealjs:
    footer: "[https://bovi-analytics.github.io/BeastsAndBytes/](https://bovi-analytics.github.io/BeastsAndBytes/)"
---

# Warm up

## Goals {#sec-goals-1}

It’s rare that all data is available in a dataframe to work with it. Typically you will have to manipulate data to get the data you want to analyse.

::: incremental
-   Learn about the **most important types of variables** that you’ll encounter inside a data frame
-   Learn the **tools you can use to work** with them.
-   For more information see the Transform chapter in the R4DS book <https://r4ds.hadley.nz/transform.html>
:::

## Goals {#sec-goals-2}

![](images/clipboard-3870586787.png)

## Setup {#sec-setup}

```{r}
#| label: load-pkg
#| message: true

library(tidyverse)
library(nycflights13)
ggplot2::theme_set(theme_gray(base_size = 16))
```

# Logical vectors {#sec-logicals}

## Introduction {#intro-part-1}

-   In this chapter, you'll learn tools for working with logical vectors.

-   Logical vectors are the simplest type of vector because each element can only be one of three possible values: `TRUE`, `FALSE`, and `NA`.

-   It's relatively rare to find logical vectors in your raw data, but you'll create and manipulate them in the course of almost every analysis.

## Introduction {#intro-part-2}

-   We'll begin by discussing the most common way of creating logical vectors: with numeric comparisons.

-   Then you'll learn about how you can use Boolean algebra to combine different logical vectors, as well as some useful summaries.

-   We'll finish off with `if_else()` and `case_when()`, two useful functions for making conditional changes powered by logical vectors.

## Comparisons {#comparison-part-1}

A very common way to create a logical vector is via a numeric comparison with `<`, `<=`, `>`, `>=`, `!=`, and `==`. So far, we've mostly created logical variables transiently within `filter()` --- they are computed, used, and then thrown away. For example, the following filter finds all daytime departures that arrive roughly on time:

```{r}
flights |> 
  filter(dep_time > 600 & dep_time < 2000 & abs(arr_delay) < 20)
```

## Comparisons {#comparison-part-2}

It's useful to know that this is a shortcut and you can explicitly create the underlying logical variables with `mutate()`:

```{r}
#| echo: true
#| results: false
flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
    .keep = "used"
  )
```

## Comparisons {#comparison-part-3}

This is particularly useful for more complicated logic because naming the intermediate steps makes it easier to both read your code and check that each step has been computed correctly.

All up, the initial filter is equivalent to:

```{r}
#| results: false

flights |> 
  mutate(
    daytime = dep_time > 600 & dep_time < 2000,
    approx_ontime = abs(arr_delay) < 20,
  ) |> 
  filter(daytime & approx_ontime)
```

## Floating point comparison {#fp-comparison-1}

Beware of using `==` with numbers. For example, it looks like this vector contains the numbers 1 and 2:

```{r}
#| echo: true
#| message: true
#| warning: false
x <- c(1 / 49 * 49, sqrt(2) ^ 2)
x
```

## Floating point comparison {#fp-comparison-2}

But if you test them for equality, you get `FALSE`:

```{r}
#| echo: true
x == c(1, 2)
```

## What's going on? {#fp-comparison-3}

Computers store numbers with a fixed number of decimal places so there's no way to exactly represent 1/49 or `sqrt(2)` and subsequent computations will be very slightly off. We can see the exact values by calling `print()` with the `digits` argument:

```{r}
#| echo: true

print(x, digits = 16)
```

## What's going on? {#fp-comparison-4}

```{r}
#| echo: true

print(x, digits = 16)
```

You can see why R defaults to rounding these numbers; they really are very close to what you expect.

Now that you've seen why `==` is failing, what can you do about it?

## Solution {#fp-comparison-5}

One option is to use `dplyr::near()` which ignores small differences:

```{r}
#| echo: true
near(x, c(1, 2))
```

## Missing values {#sec-missing-values-1}

Missing values represent the unknown so they are "contagious": almost any operation involving an unknown value will also be unknown:

```{r}
#| echo: true
NA > 5
10 == NA
```

The most confusing result is this one:

```{r}
#| echo: true
NA == NA
```

## Missing values {#sec-missing-values-2}

It's easiest to understand why this is true if we artificially supply a little more context:

```{r}
#| echo: true
# We don't know how old Mary is
age_mary <- NA

# We don't know how old John is
age_john <- NA

# Are Mary and John the same age?
age_mary == age_john
# We don't know!
```

## Missing values {#sec-missing-values-3}

So if you want to find all flights where `dep_time` is missing, the following code doesn't work because `dep_time == NA` will yield `NA` for every single row, and `filter()` automatically drops missing values:

```{r}
#| echo: true

flights |> 
  filter(dep_time == NA)
```

## Missing values {#sec-missing-values-4}

Instead we'll need a new tool: `is.na()`.

`is.na(x)` works with any type of vector and returns `TRUE` for missing values and `FALSE` for everything else:

```{r}
#| echo: true
is.na(c(TRUE, NA, FALSE))
is.na(c(1, NA, 3))
is.na(c("a", NA, "b"))
```

## Missing values {#sec-missing-values-5}

We can use `is.na()` to find all the rows with a missing `dep_time`:

```{r}
#| echo: true
flights |> 
  filter(is.na(dep_time))
```

## Missing values {#sec-missing-values-6}

`is.na()` can also be useful in `arrange()`. `arrange()` usually puts all the missing values at the end but you can override this default by first sorting by `is.na()`:

```{r}
#| echo: true
flights |> 
  filter(month == 1, day == 1) |> 
  arrange(dep_time)
```

## Missing values {#sec-missing-values-7}

`is.na()` can also be useful in `arrange()`. `arrange()` usually puts all the missing values at the end but you can override this default by first sorting by `is.na()`:

```{r}
#| echo: true

flights |>    
  filter(month == 1, day == 1) |>    
  arrange(desc(is.na(dep_time)), dep_time)
```

## Missing values {#sec-missing-values-8}

The rules for missing values in Boolean algebra are a little tricky to explain because they seem inconsistent at first glance:

```{r}
#| echo: true
df <- tibble(x = c(TRUE, FALSE, NA))
df |> 
  mutate(
    and = x & NA,
    or = x | NA
  )
```

## Missing values {#sec-missing-values-9}

To understand what's going on, think about `NA | TRUE` (`NA` or `TRUE`).

A missing value in a logical vector means that the value could either be `TRUE` or `FALSE`.

-   `TRUE | TRUE` and `FALSE | TRUE` are both `TRUE` because at least one of them is `TRUE`.

-   `NA | TRUE` must also be `TRUE` because `NA` can either be `TRUE` or `FALSE`.

-   However, `NA | FALSE` is `NA` because we don't know if `NA` is `TRUE` or `FALSE`.

-   Similar reasoning applies with `NA & FALSE`.

## Order of operations {#sec-order-operations-1}

Note that the order of operations doesn't work like English. Take the following code that finds all flights that departed in November or December:

```{r}
#| eval: false
#| echo: true
#| 
flights |> 
   filter(month == 11 | month == 12)
```

## Order of operations {#sec-order-operations-2}

You might be tempted to write it like you'd say in English: "Find all flights that departed in November or December.":

```{r}
#| echo: true
flights |> 
   filter(month == 11 | 12)
```

## Order of operations {#sec-order-operations-3}

This code doesn't error but it also doesn't seem to have worked.

-   What's going on?

-   Here, R first evaluates `month == 11` creating a logical vector, which we call `nov`.

## Order of operations {#sec-order-operations-4}

It computes `nov | 12`. When you use a number with a logical operator it converts everything apart from 0 to `TRUE`, so this is equivalent to `nov | TRUE` which will always be `TRUE`, so every row will be selected:

```{r}
#| echo: true
flights |> 
  mutate(
    nov = month == 11,
    final = nov | 12,
    .keep = "used"
  )
```

## `%in%` {#in-part-1}

An easy way to avoid the problem of getting your `==`s and `|`s in the right order is to use `%in%`. `x %in% y` returns a logical vector the same length as `x` that is `TRUE` whenever a value in `x` is anywhere in `y` .

```{r}
#| echo: true
1:12 %in% c(1, 5, 11)
letters[1:10] %in% c("a", "e", "i", "o", "u")
```

## `%in%` {#in-part-2}

So to find all flights in November and December we could write:

```{r}
#| echo: true
#| eval: false

flights |> 
  filter(month %in% c(11, 12))
```

## `%in%` {#in-part-3}

Note that `%in%` obeys different rules for `NA` to `==`, as `NA %in% NA` is `TRUE`.

```{r}
#| echo: false
#| error: false
# c(1, 2, NA) == NA
# c(1, 2, NA) %in% NA
```

## `%in%` {#in-part-4}

This can make for a useful shortcut:

```{r}
#| echo: true
flights |> 
  filter(dep_time %in% c(NA, 0800))
```

# Summaries {#sec-summaries}

The following sections describe some useful techniques for summarizing logical vectors. As well as functions that only work specifically with logical vectors, you can also use functions that work with numeric vectors.

## Logical summaries {#sec-logical-summaries-1}

There are two main logical summaries:

-   `any(x)` is the equivalent of `|`; it'll return `TRUE` if there are any `TRUE`'s in `x`.

-   `all(x)` is equivalent of `&`; it'll return `TRUE` only if all values of `x` are `TRUE`'s.

Like all summary functions, they'll return `NA` if there are any missing values present

You can make the missing values go away with `na.rm = TRUE`.

## Logical summaries {#sec-logical-summaries-2}

For example, we could use `all()` and `any()` to find out if every flight was delayed on departure by at most an hour or if any flights were delayed on arrival by five hours or more. And using `group_by()` allows us to do that by day:

```{r}
#| echo: true
flights |> 
  group_by(year, month, day) |> 
  summarize(
    all_delayed = all(dep_delay <= 60, na.rm = TRUE),
    any_long_delay = any(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

## Logical summaries {#sec-logical-summaries-3}

In most cases, however, `any()` and `all()` are a little too crude, and it would be nice to be able to get a little more detail about how many values are `TRUE` or `FALSE`.

That leads us to the numeric summaries.

## Numeric summaries of logical vectors {#sec-numeric-summaries-of-logicals-1}

When you use a logical vector in a numeric context, `TRUE` becomes 1 and `FALSE` becomes 0.

This makes `sum()` and `mean()` very useful

-   `sum(x)` gives the number of `TRUE`s

-   `mean(x)` gives the proportion of `TRUE`s (because `mean()` is just `sum()` divided by `length()`).

## Numeric summaries of logical vectors {#sec-numeric-summaries-of-logicals-2}

That, for example, allows us to see the proportion of flights that were delayed on departure by at most an hour and the number of flights that were delayed on arrival by five hours or more:

```{r}
flights |> 
  group_by(year, month, day) |> 
  summarize(
    proportion_delayed = mean(dep_delay <= 60, na.rm = TRUE),
    count_long_delay = sum(arr_delay >= 300, na.rm = TRUE),
    .groups = "drop"
  )
```

## Logical subsetting {#sec-logical-subsetting-1}

You can use a logical vector to filter a single variable to a subset of interest.

This makes use of the base `[]` (pronounced subset) operator

## Logical subsetting example {#sec-logical-subsetting-2}

Imagine we wanted to look at the average delay just for flights that were actually delayed. One way to do so would be to first filter the flights and then calculate the average delay:

```{r}
flights |> 
  filter(arr_delay > 0) |> 
  group_by(year, month, day) |> 
  summarize(
    behind = mean(arr_delay),
    n = n(),
    .groups = "drop"
  )
```

## Logical subsetting example {#sec-logical-subsetting-3}

This works, but what if we wanted to also compute the average delay for flights that arrived early?

-   We'd need to perform a separate filter step,

-   Next, join the two data frames together.

Instead you could use `[` to perform an inline filtering: `arr_delay[arr_delay > 0]` will yield only the positive arrival delays.

## Logical subsetting example {#sec-logical-subsetting-4}

This leads to:

```{r}
flights |> 
  group_by(year, month, day) |> 
  summarize(
    behind = mean(arr_delay[arr_delay > 0], na.rm = TRUE),
    ahead = mean(arr_delay[arr_delay < 0], na.rm = TRUE),
    n = n(),
    .groups = "drop"
  )
```

Also note the difference in the group size: in the first chunk `n()` gives the number of delayed flights per day; in the second, `n()` gives the total number of flights.

# Conditional transformations {#sec-conditional-transformations}

One of the most powerful features of logical vectors are their use for conditional transformations, i.e. doing one thing for condition x, and something different for condition y. There are two important tools for this: `if_else()` and `case_when()`.

## `if_else()` {#sec-if_else-1}

If you want to use one value when a condition is `TRUE` and another value when it's `FALSE`, you can use `dplyr::if_else()`.

You'll always use the first three argument of `if_else()`.

-   The first argument, `condition`, is a logical vector,

-   The second, `true`, gives the output when the condition is true,

-   The third, `false`, gives the output if the condition is false.

## `if_else()` {#sec-if_else-2}

Let's begin with a simple example of labeling a numeric vector as either "+ve" (positive) or "-ve" (negative):

```{r}
#| echo: true
x <- c(-3:3, NA)
if_else(x > 0, "+ve", "-ve")
```

## `if_else()` {#sec-if_else-3}

There's an optional fourth argument, `missing` which will be used if the input is `NA`:

```{r}
#| echo: true
if_else(x > 0, "+ve", "-ve", "???")
```

## `if_else()` {#sec-if_else-4}

You can also use vectors for the `true` and `false` arguments. For example, this allows us to create a minimal implementation of `abs()`:

```{r}
#| echo: true
if_else(x < 0, -x, x)
```

## `case_when()` {#sec-case_when-1}

Syntax to recreate our nested `if_else()` as follows:

```{r}
#| echo: true
case_when(
  x < 0 ~ "-ve",
  x > 0 ~ "+ve"
)
```

## `case_when()` {#sec-case_when-2}

Use `.default` if you want to create a "default"/catch all value:

```{r}
#| echo: true
case_when(
  x < 0 ~ "-ve",
  x > 0 ~ "+ve",
  .default = "???"
)
```

## `case_when()` {#sec-case_when-3}

And note that if multiple conditions match, only the first will be used:

```{r}
#| echo: true
case_when(
  x > 0 ~ "+ve",
  x > 2 ~ "big"
)
```

## `case_when() example` {#sec-case_when-4}

```{r}
#| echo: true
flights |> 
  mutate(
    status = case_when(
      is.na(arr_delay)      ~ "cancelled",
      arr_delay < -30       ~ "very early",
      arr_delay < -15       ~ "early",
      abs(arr_delay) <= 15  ~ "on time",
      arr_delay < 60        ~ "late",
      arr_delay < Inf       ~ "very late",
    ),
    .keep = "used"
  )
```

Be wary when writing this sort of complex `case_when()` statement; my first two attempts used a mix of `<` and `>` and I kept accidentally creating overlapping conditions.

## Compatible types {#sec-compatibility-types-1}

Note that both `if_else()` and `case_when()` require **compatible** types in the output. If they're not compatible, you'll see errors like this:

```{r}
#| echo: true
#| error: true

if_else(TRUE, "a", 1)

case_when(
  x < -1 ~ TRUE,  
  x > 0  ~ now()
)
```

## Compatible types {#sec-compatibility-types-2}

Overall, relatively few types are compatible, because automatically converting one type of vector to another is a common source of errors. Here are the most important cases that are compatible:

-   Numeric and logical vectors are compatible.
-   Strings and factors are compatible, because you can think of a factor as a string with a restricted set of values.
-   Dates and date-times are compatible because you can think of a date as a special case of date-time.
-   `NA`, which is technically a logical vector, is compatible with everything because every vector has some way of representing a missing value.
