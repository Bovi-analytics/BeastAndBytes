---
title: "Joining datasets"
subtitle: "Lecture 7"
date: "March 10, 2025"
format: 
  revealjs:
    footer: "[https://bovi-analytics.github.io/BeastsAndBytes/](https://bovi-analytics.github.io/BeastsAndBytes/)"
---

# Warm up

## Goals

It’s rare that a data analysis involves only a single data frame. Typically you have many data frames, and you must **join** them together to answer the questions that you’re interested in.

::: incremental
-   **Mutating joins**, which add new variables to one data frame from matching observations in another.
-   **Filtering joins**, which filter observations from one data frame based on whether or not they match an observation in another (conditional match.
:::

For more information see this link <https://r4ds.hadley.nz/joins.html>

## Setup

```{r}
#| label: load-pkg
#| message: false


library(tidyverse)
ggplot2::theme_set(theme_gray(base_size = 16))
```

# Keys

## Primary key

::: incremental
-   Every join involves a pair of keys: a primary key (or keys) and a foreign key (or keys).

-   A **primary key** is a variable or set of variables that uniquely identifies each observation.

-   When more than one variable is needed, the key is called a **compound key.**
:::

## Foreign key

A **foreign key** is a variable (or set of variables) that corresponds to a primary key in another table.

## Visualizing key relationships

Often it helps to visualize the keys and their relationships.

![](https://r4ds.hadley.nz/diagrams/relational.png)

## Best practices

::: incremental
-   Have the primary and foreign keys have the same names accross the dataframes.

-   Have the other columns different names (to avoid confusion after joining).

-   Verify that keys do indeed uniquely identify each observation.

-   Sometimes you will have to create a key by combining columns generating **a surrogate key**.
:::

# Basic joins

## Lets use some real data

```{r data-read}
#| echo: true

library(nycflights13)
```

## Airlines dataset

```{r data-prep-1}
#| echo: true

airlines
```

## Airports dataset

```{r data-prep-2}
#| echo: true

airports
```

## Planes dataset

```{r data-write}
#| echo: true

planes
```

## Weather dataset

```{r data-overview}
#| echo: true

weather
```

## Key overview

-   `flights$tailnum` is a foreign key that corresponds to the primary key `planes$tailnum`.

-   `flights$carrier` is a foreign key that corresponds to the primary key `airlines$carrier`.

-   `flights$origin`-`flights$time_hour` is a compound foreign key that corresponds to the compound primary key `weather$origin`-`weather$time_hour`.

# Mutating joins {#regression-model-1}

-   A **mutating join** allows you to combine variables from two data frames: it first matches observations by their keys, then copies across variables from one data frame to the other.

-   Like [`mutate()`](https://dplyr.tidyverse.org/reference/mutate.html), the join functions add variables to the right, so if your dataset has many variables, you won’t see the new ones. 

## Overview

The joins shown here are the so-called **equi** **joins**, where rows match if the keys are equal (inner and outer joins)

![](https://r4ds.hadley.nz/diagrams/join/venn.png)

## Inner join (A)

-   Rows are retained if and only if the keys are equal.

![](https://r4ds.hadley.nz/diagrams/join/inner.png)

## Inner join (B)

There are three possible outcomes for a row in `x`:

-   If it doesn’t match anything, it’s dropped.

-   If it matches 1 row in `y`, it’s preserved.

-   If it matches more than 1 row in `y`, it’s **duplicated once for each match**.

## Outer joins

-   Left join

-   Right join

-   Full join

## Left join

-   A **left join** keeps all observations in `x`

-   Every row of `x` is preserved in the output because it can fall back to matching a row of `NA`s in `y`.

![](https://r4ds.hadley.nz/diagrams/join/left.png)

## Right join

-   A **right join** keeps all observations in `y`, 

-   Every row of `y` is preserved in the output because it can fall back to matching a row of `NA`s in `x`.

-   The output still matches `x` as much as possible; any extra rows from `y` are added to the end.

![](https://r4ds.hadley.nz/diagrams/join/right.png)

## Full join

-   A **full join** keeps all observations that appear in `x` or `y`, 

-   Every row of `x` and `y` is included in the output because both `x` and `y` have a fall back row of `NA`s.

-   Again, the output starts with all rows from `x`, followed by the remaining unmatched `y` rows.

![](https://r4ds.hadley.nz/diagrams/join/full.png)

# Filtering joins

Filtering joins never duplicate rows like mutating joins do.

## Semi join

-   The semi-join keeps rows in `x` that have one or more matches in `y`

![](https://r4ds.hadley.nz/diagrams/join/semi.png)

## Anti join

-   The anti-join keeps rows in `x` that match zero rows in `y`,

![](https://r4ds.hadley.nz/diagrams/join/anti.png)

# Non-equi joins (A)

So far you’ve only seen equi joins, joins where the rows match if the `x` key equals the `y` key. 

![](https://r4ds.hadley.nz/diagrams/join/inner-both.png)

## Introduction to non-equi

Basic idea of non-equi joins

![](https://r4ds.hadley.nz/diagrams/join/gte.png)

## Types of non-equi joins

-   **Cross joins** match every pair of rows.

-   **Inequality joins** use `<`, `<=`, `>`, and `>=` instead of `==`.

-   **Rolling joins** are similar to inequality joins but only find the closest match.

-   **Overlap joins** are a special type of inequality join designed to work with ranges.

## Cross join

-   A cross join matches everything, generating the Cartesian product of rows.

-   This means the output will have `nrow(x) * nrow(y)` rows.

-   Sometimes called a **self-join**.

![](https://r4ds.hadley.nz/diagrams/join/cross.png)

## **Inequality joins**

-   Inequality joins use `<`, `<=`, `>=`, or `>` to restrict the set of possible matches

![](https://r4ds.hadley.nz/diagrams/join/lt.png)

## **Rolling joins**

-   Rolling joins are a special type of inequality join where instead of getting *every* row that satisfies the inequality, you get just the closest row.

    ![](https://r4ds.hadley.nz/diagrams/join/closest.png)

## **Overlap joins**

-   `between(x, y_lower, y_upper)` is short for `x >= y_lower, x <= y_upper`.

-   `within(x_lower, x_upper, y_lower, y_upper)` is short for `x_lower >= y_lower, x_upper <= y_upper`.

-   `overlaps(x_lower, x_upper, y_lower, y_upper)` is short for `x_lower <= y_upper, x_upper >= y_lower`.
