---
title: "Data transformations"
subtitle: "Lecture 11"
date: "April 10, 2025"
format: 
  revealjs:
    footer: "[https://bovi-analytics.github.io/BeastsAndBytes/](https://bovi-analytics.github.io/BeastsAndBytes/)"
---

# Introduction to dates and times {#sec-introduction}

## Prerequisites {#sec-prerequisites}

-   This chapter will focus on the **lubridate** package, which makes it easier to work with dates and times in R.
-   As of the latest tidyverse release, lubridate is part of core tidyverse.

```{r}
#| label: setup
#| echo: true
#| message: false

library(tidyverse)
```

# Date & time {#sec-datetime}

## Date and time basics {#sec-dt-basics-1}

There are three types of date/time data that refer to an instant in time:

-   A **date**. Tibbles print this as `<date>`.

-   A **time** within a day. Tibbles print this as `<time>`.

-   A **date-time** is a date plus a time: it uniquely identifies an instant in time (typically to the nearest second). Tibbles print this as `<dttm>`.

## Date and time basics {#sec-dt-basics-2}

You should always use the simplest possible data type that works for your needs.

That means if you can use a date instead of a date-time, you should.

Date-times are substantially more complicated because of the need to handle time zones, which we'll come back to at the end of the chapter.

## Current {#sec-current}

To get the current date or date-time you can use `today()` or `now()`:

```{r}
#| echo: true
#| message: true
today()
now()
```

## Date-time importing {#sec-dt-import-1}

If your CSV contains an ISO8601 date or date-time, you don't need to do anything; readr will automatically recognize it:

```{r}
#| echo: true
#| message: true
csv <- "
  date,datetime
  2022-01-02,2022-01-02 05:12
"
read_csv(csv)
```

## ISO8601 {#sec-dt-import-2}

If you haven't heard of **ISO8601** before, it's an international standard[^1] for writing dates where the components of a date are organized from biggest to smallest separated by `-`.

[^1]: <https://xkcd.com/1179/>

For example, in ISO8601 May 3 2022 is `2022-05-03`. ISO8601 dates can also include times, where hour, minute, and second are separated by `:`, and the date and time components are separated by either a `T` or a space.

For example, you could write 4:26pm on May 3 2022 as either `2022-05-03 16:26` or `2022-05-03T16:26`.

## Other formats {#sec-dt-import-3}

For other date-time formats, you'll need to use `col_types` plus `col_date()` or `col_datetime()` along with a date-time format. The date-time format used by readr is a standard used across many programming languages, describing a date component with a `%` followed by a single character. For example, `%Y-%m-%d` specifies a date that's a year, `-`, month (as number) `-`, day.

## Other formats {#sec-dt-import-4a}

| Type  | Code | Meaning           | Example  |
|-------|------|-------------------|----------|
| Year  | `%Y` | 4 digit year      | 2021     |
|       | `%y` | 2 digit year      | 21       |
| Month | `%m` | Number            | 2        |
|       | `%b` | Abbreviated name  | Feb      |
|       | `%B` | Full name         | February |
| Day   | `%d` | One or two digits | 2        |
|       | `%e` | Two digits        | 02       |

## Other formats {#sec-dt-import-4b}

| Type  | Code  | Meaning                        | Example         |
|-------|-------|--------------------------------|-----------------|
| Time  | `%H`  | 24-hour hour                   | 13              |
|       | `%I`  | 12-hour hour                   | 1               |
|       | `%p`  | AM/PM                          | pm              |
|       | `%M`  | Minutes                        | 35              |
|       | `%S`  | Seconds                        | 45              |
|       | `%OS` | Seconds with decimal component | 45.35           |
|       | `%Z`  | Time zone name                 | America/Chicago |
|       | `%z`  | Offset from UTC                | +0800           |
| Other | `%.`  | Skip one non-digit             | :               |
|       | `%*`  | Skip any number of non-digits  |                 |

## Datetime exmaple {#sec-dt-import-5}

```{r}
#| echo: true
#| message: true
csv <- "
  date
  01/02/15
"

read_csv(csv, col_types = cols(date = col_date("%m/%d/%y")))

read_csv(csv, col_types = cols(date = col_date("%d/%m/%y")))

read_csv(csv, col_types = cols(date = col_date("%y/%m/%d")))
```

# Date-time components {#sec-dt-components-1}

## Getting components {#sec-dt-components-get-1}

You can pull out individual parts of the date with the accessor functions `year()`, `month()`, `mday()` (day of the month), `yday()` (day of the year), `wday()` (day of the week), `hour()`, `minute()`, and `second()`. These are effectively the opposites of `make_datetime()`.

## Getting components {#sec-dt-components-get-2}

```{r}
#| echo: true
#| message: true
datetime <- ymd_hms("2026-07-08 12:34:56")

year(datetime)
month(datetime)
mday(datetime)

yday(datetime)
wday(datetime)
```

## Getting components {#sec-dt-components-abbr}

For `month()` and `wday()` you can set `label = TRUE` to return the abbreviated name of the month or day of the week. Set `abbr = FALSE` to return the full name.

```{r}
#| echo: true
#| message: true
month(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
```

## Datetime rounding {#sec-dt-rounding}

An alternative approach to plotting individual components is to round the date to a nearby unit of time, with `floor_date()`, `round_date()`, and `ceiling_date()`. Each function takes a vector of dates to adjust and then the name of the unit to round down (floor), round up (ceiling), or round to.

```{r}
#| eval: false
#| echo: true
#| message: true
week = floor_date(dep_time, "week")
```

## Datetime modifying {#sec-dt-modifying-1}

You can also use each accessor function to modify the components of a date/time. This doesn't come up much in data analysis, but can be useful when cleaning data that has clearly incorrect dates.

```{r}
#| echo: true
#| message: true
(datetime <- ymd_hms("2026-07-08 12:34:56"))

year(datetime) <- 2030
datetime
month(datetime) <- 01
datetime
hour(datetime) <- hour(datetime) + 1
datetime
```

## Datetime updating {#sec-dt-modifying-2}

You can also use each accessor function to modify the components of a date/time. This doesn't come up much in data analysis, but can be useful when cleaning data that has clearly incorrect dates.

```{r}
#| echo: true
#| message: true
update(datetime, year = 2030, month = 2, mday = 2, hour = 2)
```

# Time spans

## Time span {#sec-timespan-basics-1}

Next you'll learn about how arithmetic with dates works, including subtraction, addition, and division. Along the way, you'll learn about three important classes that represent time spans:

-   **Durations**, which represent an exact number of seconds.
-   **Periods**, which represent human units like weeks and months.
-   **Intervals**, which represent a starting and ending point.

## Time span {#sec-timespan-basics-2}

How do you pick between duration, periods, and intervals?

As always, pick the simplest data structure that solves your problem.

- If you only care about physical time, use a duration; 
- If you need to add human times, use a period; 
- If you need to figure out how long a span is in human units, use an interval.

## Durations {#sec-duration-1}

In R, when you subtract two dates, you get a difftime object:

```{r}
#| echo: true
#| message: true
# How old is Miel?
h_age <- today() - ymd("1982-04-27")
h_age
```

## Durations {#sec-duration-2}

A `difftime` class object records a time span of seconds, minutes, hours, days, or weeks. 

This ambiguity can make difftimes a little painful to work with, so lubridate provides an alternative which always uses seconds: the **duration**.

```{r}
#| echo: true
#| message: true
as.duration(h_age)
```

## Durations {#sec-duration-3}

Durations come with a bunch of convenient constructors:

```{r}
#| echo: true
#| message: true
dseconds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0:5)
dweeks(3)
dyears(1)
```

## Durations {#sec-duration-4}

-   **Durations always record the time span in seconds.**

-   Larger units are created by converting minutes, hours, days, weeks, and years to seconds: 60 seconds in a minute, 60 minutes in an hour, 24 hours in a day, and 7 days in a week.

-   Larger time units are more problematic.

-   A year uses the "average" number of days in a year, i.e. 365.25.

-   There's no way to convert a month to a duration, because there's just too much variation.

## Add and multiply durations {#sec-duration-5}

You can add and multiply durations:

```{r}
#| echo: true
#| message: true
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)
```

## Add and substract durations {#sec-duration-6}

You can add and subtract durations to and from days:

```{r}
#| echo: true
#| message: true
tomorrow <- today() + ddays(1)
tomorrow
last_year <- today() - dyears(1)
last_year
```

## Whatch for unexpected results {#sec-duration-7}

However, because durations represent an exact number of seconds, sometimes you might get an unexpected result:

```{r}
#| echo: true
#| message: true
one_am <- ymd_hms("2026-03-08 01:00:00", tz = "America/New_York")

one_am
one_am + ddays(1)
```

Why is one day after 1am March 8, 2am March 9? If you look carefully at the date you might also notice that the time zones have changed. March 8 only has 23 hours because it's when DST starts, so if we add a full days worth of seconds we end up with a different time.

# Periods {#sec-periods}

## Periods {#sec-periods-1}

Lubridate provides **periods** solve this problem. 

Periods are time spans but don't have a fixed length in seconds, instead they work with "human" times, like days and months. 

That allows them to work in a more intuitive way:

```{r}
#| echo: true
#| message: true
one_am
one_am + days(1)
```

## Periods {#sec-periods-2}

Like durations, periods can be created with a number of friendly constructor functions.

```{r}
#| echo: true
#| message: true
hours(c(12, 24))
days(7)
months(1:6)
```

## Periods

You can add and multiply periods:

```{r}
#| echo: true
#| message: true
10 * (months(6) + days(1))
days(50) + hours(25) + minutes(2)
```

## Periods {#sec-periods-3}

And of course, add them to dates. Compared to durations, periods are more likely to do what you expect:

```{r}
#| echo: true
#| message: true
# A leap year
ymd("2024-01-01") + dyears(1)
ymd("2024-01-01") + years(1)

# Daylight saving time
one_am + ddays(1)
one_am + days(1)
```

# Time zones {#sec-tz}

## Time zones {#sec-tz-1}

Time zones are an enormously complicated topic because of their interaction with geopolitical entities. Fortunately we don't need to dig into all the details as they're not all important for data analysis, but there are a few challenges we'll need to tackle head on.
